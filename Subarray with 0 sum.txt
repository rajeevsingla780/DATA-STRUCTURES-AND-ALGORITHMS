//Subarray with 0 sum


//--------------------------------------------------------------------------

//1) Naive
//--------------
class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        if (find(arr,arr+n,0)!=arr+n)
        return true;
       for(int i=0;i<n;i++)
       {
           int sum=0;
           for(int j=i+1;j<n;j++)
           {
               sum+=arr[j];
               if(arr[i]+sum==0)
               {
                   return true;
               }
           }
       }
       return false;
    }
};

//2)Optimal O(n) time and O(n) space

//------------------------------------------

class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        if (find(arr,arr+n,0)!=arr+n)
        return true;
        vector <int> vc;
        vc.push_back(arr[0]);
        int sum=arr[0];
       for(int i=1;i<n;i++)
       {
           sum=sum+arr[i];
           if(sum==0)
               return true;
               else
          vc.push_back(sum);
       }
       sort(vc.begin(),vc.end());
       int s1=vc[0];
       for(int i=1;i<n;i++)
       {
           if(s1==vc[i])
           return true;
           else
           s1=vc[i];
       }
       return false;
    }
};

//Video Link-https://youtu.be/QtbFXZrEZYc