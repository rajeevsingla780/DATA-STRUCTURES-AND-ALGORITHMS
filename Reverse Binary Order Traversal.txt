//Reverse Binary Order Traversal
//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
//---------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector <vector<int>> vec1;
        vector<int> vec2;
      queue <TreeNode*> q1;
        if(root==NULL)
            return vec1;
        if(root->left==NULL && root->right==NULL)
            return {{root->val}};
      q1.push(root);
        
      while(!q1.empty())
      {
          int q= q1.size();
          for (int i=0;i<q;i++)
          {
          TreeNode* p1=q1.front();
          q1.pop();
          vec2.push_back(p1->val);
          if(p1->left!=NULL)
          {
              q1.push(p1->left);
          }
          if(p1->right!=NULL)
          {
              q1.push(p1->right);
          }
          }
          vec1.push_back(vec2);
          vec2.clear();
      }
     reverse(vec1.begin(),vec1.end());
      return vec1;
        
    }
};