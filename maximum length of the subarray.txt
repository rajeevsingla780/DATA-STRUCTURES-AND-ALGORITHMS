// arr[] : the input array containing 0s and 1s
// N : size of the input array
// return the maximum length of the subarray
// with equal 0s and 1s

class Solution{
  public:
    int maxLen(int arr[], int N)
    {
        // Your code here
        if (N==0)
        {
            return 0;
        }
        int int0=0;
        int int1=0;
        for(int i=0;i< N;i++)
        {
            if(arr[i]==0)
            {
                int0+=1;
                arr[i]=-1;
            }
            else
            {
                int1+=1;
            }
        }
        if (int1==int0)
        {
            return N;
        }
    unordered_map <int,int> map1;
    int largest_subarray=0;
    int sum=0;
    for(int i=0;i<N;i++)
    {
        sum=sum+arr[i];
        if(map1.find(sum)==map1.end()&&sum!=0)
        {
            map1[sum]=i;
            
        }
        else if(sum==0)
        {
            largest_subarray=i+1;
        }
        else
        {
            if(largest_subarray<=i-map1[sum])
            {
                largest_subarray=i-map1[sum];
            }
        }
    }
        return largest_subarray;
    }
    
};